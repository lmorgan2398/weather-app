{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack:///./src/styles.css","webpack:///./node_modules/css-loader/dist/runtime/getUrl.js","webpack:///./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack:///./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack:///./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/runtime/nonce","webpack:///./src/styles.css?44b2","webpack:///./node_modules/date-fns/locale/en-US/_lib/formatDistance.js","webpack:///./node_modules/date-fns/locale/_lib/buildFormatLongFn.js","webpack:///./node_modules/date-fns/locale/en-US/_lib/formatLong.js","webpack:///./node_modules/date-fns/locale/en-US/_lib/formatRelative.js","webpack:///./node_modules/date-fns/locale/_lib/buildLocalizeFn.js","webpack:///./node_modules/date-fns/locale/en-US/_lib/localize.js","webpack:///./node_modules/date-fns/locale/_lib/buildMatchFn.js","webpack:///./node_modules/date-fns/locale/en-US/_lib/match.js","webpack:///./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","webpack:///./node_modules/date-fns/locale/en-US.js","webpack:///./node_modules/date-fns/_lib/format/longFormatters.js","webpack:///./node_modules/date-fns/_lib/protectedTokens.js","webpack:///./node_modules/date-fns/constants.js","webpack:///./node_modules/date-fns/constructFrom.js","webpack:///./node_modules/date-fns/_lib/defaultOptions.js","webpack:///./node_modules/date-fns/getDefaultOptions.js","webpack:///./node_modules/date-fns/toDate.js","webpack:///./node_modules/date-fns/parse/_lib/Setter.js","webpack:///./node_modules/date-fns/transpose.js","webpack:///./node_modules/date-fns/parse/_lib/Parser.js","webpack:///./node_modules/date-fns/parse/_lib/constants.js","webpack:///./node_modules/date-fns/parse/_lib/utils.js","webpack:///./node_modules/date-fns/startOfWeek.js","webpack:///./node_modules/date-fns/getWeekYear.js","webpack:///./node_modules/date-fns/startOfISOWeek.js","webpack:///./node_modules/date-fns/getWeek.js","webpack:///./node_modules/date-fns/startOfWeekYear.js","webpack:///./node_modules/date-fns/getISOWeekYear.js","webpack:///./node_modules/date-fns/getISOWeek.js","webpack:///./node_modules/date-fns/startOfISOWeekYear.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/DateParser.js","webpack:///./node_modules/date-fns/addDays.js","webpack:///./node_modules/date-fns/setDay.js","webpack:///./node_modules/date-fns/setISODay.js","webpack:///./node_modules/date-fns/getISODay.js","webpack:///./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack:///./node_modules/date-fns/parse/_lib/parsers.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/EraParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/YearParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/MonthParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","webpack:///./node_modules/date-fns/setWeek.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","webpack:///./node_modules/date-fns/setISOWeek.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/DayParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/SecondParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","webpack:///./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","webpack:///./node_modules/date-fns/parse.js","webpack:///./node_modules/date-fns/startOfDay.js","webpack:///./node_modules/date-fns/getDayOfYear.js","webpack:///./node_modules/date-fns/differenceInCalendarDays.js","webpack:///./node_modules/date-fns/_lib/normalizeDates.js","webpack:///./node_modules/date-fns/startOfYear.js","webpack:///./node_modules/date-fns/_lib/addLeadingZeros.js","webpack:///./node_modules/date-fns/_lib/format/lightFormatters.js","webpack:///./node_modules/date-fns/_lib/format/formatters.js","webpack:///./node_modules/date-fns/isValid.js","webpack:///./node_modules/date-fns/isDate.js","webpack:///./node_modules/date-fns/format.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/tzIntlTimeZoneName/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/newDateUTC/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/format/formatters/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/_lib/tzPattern/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/toDate/index.js","webpack:///./node_modules/date-fns-tz/dist/esm/format/index.js","webpack:///./src/ui.js","webpack:///./node_modules/date-fns/startOfHour.js","webpack:///./node_modules/date-fns-tz/dist/esm/toZonedTime/index.js","webpack:///./src/index.js","webpack:///./src/api.js"],"sourcesContent":["\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../node_modules/css-loader/dist/runtime/getUrl.js\";\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(\"./images/backgrounds/thunderstorm.png\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(\"./images/backgrounds/snow.png\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(\"./images/backgrounds/rain.png\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_3___ = new URL(\"./images/backgrounds/fog.png\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_4___ = new URL(\"./images/backgrounds/cloudy.png\", import.meta.url);\nvar ___CSS_LOADER_URL_IMPORT_5___ = new URL(\"./images/backgrounds/clear.png\", import.meta.url);\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_5___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `html,\nbody,\n* {\n    border: 0;\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-size: 16px;\n    font-family: sans-serif;\n}\n\nhtml, \nbody {\n    width: 100%;\n    min-height: 100%;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n    background-color: whitesmoke;\n}\n\n/* Style basic site containers */\n\n.header-container {\n    background-color: rgb(21, 21, 63);\n    color: white;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    align-self: stretch;\n    padding: 1rem;\n}\n\n.main-container {\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    background-color: whitesmoke;\n}\n\n.content-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    width: min(100%, 65rem);\n    padding: 1rem 4rem;\n}\n\n/* Basic header section styling */\n.header-container * {\n    max-width: 100%;\n}\n\n.header-container .logo {\n    height: 4.5rem;\n    width: 4.5rem;\n    padding: .1rem;\n    background-color: white;\n    border-radius: 6px;\n}\n\n.searchbar {\n    display: flex;\n    align-items: center;\n}\n\n.search-button {\n    background: none;\n    border: none;\n    padding: 0;\n    cursor: pointer;\n}\n\n.search-button img {\n    background-color: rgb(21, 21, 63);\n    width: 2rem;\n    height: 2rem;\n}\n\n#search {\n    font-size: 1.2rem;\n    padding: .5rem 1rem;\n    color: black;\n    border-radius: 6px;\n    background-color: whitesmoke;\n    border: 2px solid rgb(21, 21, 63);\n    outline: none;\n}\n\n#search:hover,\n#search:focus {\n    outline: none;\n    border: 2px solid rgb(69, 69, 70);\n    background-color: rgb(198, 198, 230);\n}\n\n#search::placeholder {\n    color:rgb(64, 64, 78);\n}\n\n.degrees-button {\n    width: 4.5rem;\n    height: 4.5rem;\n    padding: 1rem;\n    background-color: white;\n    color: rgb(34, 34, 65);\n    font-size: 1.8rem;\n    border-radius: 6px;\n}\n\n.degrees-button:hover {\n    background-color: lightgray;\n    cursor: pointer;\n}\n/* Overview section basic styling */\n\n.overview {\n    width: 100%;\n    border-radius: 6px;\n    background-color: gray;\n    height: min-content;\n    color: white;\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center;\n}\n\n.overview-header {\n    padding: 1rem;\n    background-color: rgba(0, 0, 0, 0.5);\n    border-radius: 6px 6px 0px 0px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.overview .location {\n    font-size: 1.25rem;\n    font-weight: bold;\n}\n\n.overview .time {\n    font-size: 1.1rem;\n}\n\n.overview-info {\n    display: flex;\n    flex-direction: column;\n    padding: 1rem;\n}\n\n.overview-info .temperature {\n    font-size: 5rem;\n    font-weight: bold;\n    padding-top: .25rem;\n}\n\n.overview-info .weather,\n.overview-info .day-night {\n    font-size: 1.4rem;\n    font-weight: bold;\n    padding-top: .25rem;\n}\n\n/* Dynamic styling for the overview background based on current conditions */\n.overview.default {\n    background-color: gray;\n}\n\n.overview.thunderstorm {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_0___});\n}\n\n.overview.snow {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_1___});\n}\n\n.overview.rain {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_2___});\n}\n\n.overview.fog {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_3___});\n}\n\n.overview.cloudy {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_4___});\n}\n\n.overview.clear {\n    background-image: url(${___CSS_LOADER_URL_REPLACEMENT_5___});\n}\n\n/* Today's info basic styling */\n.today {\n    width: 100%;\n    background-color: white;\n    border-radius: 6px;\n    display: flex;\n    flex-direction: column;\n    height: min-content;\n}\n\n.today-header {\n    padding: 1.2rem;\n    font-weight: bold;\n}\n\n.today-header p {\n    font-size: 1.2rem;\n}\n\n.today .basic-info {\n    display: flex;\n    padding: 1rem;\n    justify-content: space-between;\n}\n\n.feels-like * {\n    font-weight: bold;\n    margin-left: 1rem;\n}\n\n.feels-like .temp {\n    font-size: 3rem;\n}\n\n.basic-info img {\n    width: 1.5rem;\n    height: 1.5rem;\n}\n\n.sunrise-sunset {\n    display: flex;\n}\n\n.sunrise-sunset div {\n    display: flex;\n    align-items: center;\n    margin-left: .5rem;\n}\n\n.today .detailed-info {\n    display: grid;\n    padding: 1rem;\n    gap: 0rem 1rem;\n    grid-template-columns: 1fr 1fr;\n}\n\n.today .detailed-info > * {\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid rgb(196, 196, 196);\n    padding: .75rem 1rem;\n    align-items: center;\n    height: min-content;\n}\n\n.today .detailed-info .info-stuff {\n    display: flex;\n    align-items: center;\n}\n\n.info-stuff img {\n    width: 1.5rem;\n    height: 1.5rem;\n    object-fit: contain;\n    margin-right: .5rem;\n}\n\n/* Hourly section basic styling */\n\n.hourly {\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n    background-color: white;\n    border-radius: 6px;\n}\n\n.hourly-header {\n    padding: 1rem 1rem 1rem 1rem;\n    background-color: rgb(34, 34, 65);\n    border-radius: 6px 6px 0px 0px;\n}\n\n.hourly-header p {\n    font-size: 1.2rem;\n    color: white;\n}\n\n.forecast-container-container {\n    display: flex;\n    padding: .5rem;\n}\n\n.forecast-container {\n    display: flex;\n    width: 100%;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    height: min-content;\n    gap: 1.5rem;\n    padding: .5rem 1rem 1rem;\n    background-color: white;\n}\n\n.hour {\n    text-wrap: nowrap;\n    width: min-content;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.hour .icon {\n    width: 2rem;\n    height: 2rem;\n}\n\n.rainfall {\n    display: flex;\n}\n\n.rainfall p {\n    font-size: .8rem;\n}\n\n.rainfall-img {\n    height: .8rem;\n    width: .8rem;\n}\n\n/* Style the 10-day forecast section */\n\n.ten-day {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n    background-color: white;\n    border-radius: 6px;\n}\n\n.ten-day-header {\n    background-color: rgb(34, 34, 65);\n    color: white;\n    padding: 1rem;\n    border-radius: 6px 6px 0px 0px;\n}\n\n.ten-day-header p {\n    font-size: 1.2rem;\n}\n\n.ten-day-forecast-container {\n    padding: .5rem 1rem;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.day { \n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    align-items: center;\n    padding: .5rem 1rem;\n    border-bottom: 1px solid gray;\n}\n\n.day[data-index=\"9\"] {\n    border-bottom: none;\n}\n\n.day .date {\n    width: 7rem;\n    font-size: 1rem;\n}\n\n.day .info {\n    display: flex;\n    gap: 1rem;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.day .condition {\n    height: 2rem;\n    width: 2rem;\n}\n\n.day .max-min {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/styles.css\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"html,\\nbody,\\n* {\\n    border: 0;\\n    padding: 0;\\n    margin: 0;\\n    box-sizing: border-box;\\n    font-size: 16px;\\n    font-family: sans-serif;\\n}\\n\\nhtml, \\nbody {\\n    width: 100%;\\n    min-height: 100%;\\n}\\n\\nbody {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    width: 100%;\\n    background-color: whitesmoke;\\n}\\n\\n/* Style basic site containers */\\n\\n.header-container {\\n    background-color: rgb(21, 21, 63);\\n    color: white;\\n    width: 100%;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    align-self: stretch;\\n    padding: 1rem;\\n}\\n\\n.main-container {\\n    width: 100%;\\n    display: flex;\\n    justify-content: center;\\n    background-color: whitesmoke;\\n}\\n\\n.content-container {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    width: min(100%, 65rem);\\n    padding: 1rem 4rem;\\n}\\n\\n/* Basic header section styling */\\n.header-container * {\\n    max-width: 100%;\\n}\\n\\n.header-container .logo {\\n    height: 4.5rem;\\n    width: 4.5rem;\\n    padding: .1rem;\\n    background-color: white;\\n    border-radius: 6px;\\n}\\n\\n.searchbar {\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.search-button {\\n    background: none;\\n    border: none;\\n    padding: 0;\\n    cursor: pointer;\\n}\\n\\n.search-button img {\\n    background-color: rgb(21, 21, 63);\\n    width: 2rem;\\n    height: 2rem;\\n}\\n\\n#search {\\n    font-size: 1.2rem;\\n    padding: .5rem 1rem;\\n    color: black;\\n    border-radius: 6px;\\n    background-color: whitesmoke;\\n    border: 2px solid rgb(21, 21, 63);\\n    outline: none;\\n}\\n\\n#search:hover,\\n#search:focus {\\n    outline: none;\\n    border: 2px solid rgb(69, 69, 70);\\n    background-color: rgb(198, 198, 230);\\n}\\n\\n#search::placeholder {\\n    color:rgb(64, 64, 78);\\n}\\n\\n.degrees-button {\\n    width: 4.5rem;\\n    height: 4.5rem;\\n    padding: 1rem;\\n    background-color: white;\\n    color: rgb(34, 34, 65);\\n    font-size: 1.8rem;\\n    border-radius: 6px;\\n}\\n\\n.degrees-button:hover {\\n    background-color: lightgray;\\n    cursor: pointer;\\n}\\n/* Overview section basic styling */\\n\\n.overview {\\n    width: 100%;\\n    border-radius: 6px;\\n    background-color: gray;\\n    height: min-content;\\n    color: white;\\n    background-size: cover;\\n    background-repeat: no-repeat;\\n    background-position: center;\\n}\\n\\n.overview-header {\\n    padding: 1rem;\\n    background-color: rgba(0, 0, 0, 0.5);\\n    border-radius: 6px 6px 0px 0px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n}\\n\\n.overview .location {\\n    font-size: 1.25rem;\\n    font-weight: bold;\\n}\\n\\n.overview .time {\\n    font-size: 1.1rem;\\n}\\n\\n.overview-info {\\n    display: flex;\\n    flex-direction: column;\\n    padding: 1rem;\\n}\\n\\n.overview-info .temperature {\\n    font-size: 5rem;\\n    font-weight: bold;\\n    padding-top: .25rem;\\n}\\n\\n.overview-info .weather,\\n.overview-info .day-night {\\n    font-size: 1.4rem;\\n    font-weight: bold;\\n    padding-top: .25rem;\\n}\\n\\n/* Dynamic styling for the overview background based on current conditions */\\n.overview.default {\\n    background-color: gray;\\n}\\n\\n.overview.thunderstorm {\\n    background-image: url(./images/backgrounds/thunderstorm.png);\\n}\\n\\n.overview.snow {\\n    background-image: url(./images/backgrounds/snow.png);\\n}\\n\\n.overview.rain {\\n    background-image: url(./images/backgrounds/rain.png);\\n}\\n\\n.overview.fog {\\n    background-image: url(./images/backgrounds/fog.png);\\n}\\n\\n.overview.cloudy {\\n    background-image: url(./images/backgrounds/cloudy.png);\\n}\\n\\n.overview.clear {\\n    background-image: url(./images/backgrounds/clear.png);\\n}\\n\\n/* Today's info basic styling */\\n.today {\\n    width: 100%;\\n    background-color: white;\\n    border-radius: 6px;\\n    display: flex;\\n    flex-direction: column;\\n    height: min-content;\\n}\\n\\n.today-header {\\n    padding: 1.2rem;\\n    font-weight: bold;\\n}\\n\\n.today-header p {\\n    font-size: 1.2rem;\\n}\\n\\n.today .basic-info {\\n    display: flex;\\n    padding: 1rem;\\n    justify-content: space-between;\\n}\\n\\n.feels-like * {\\n    font-weight: bold;\\n    margin-left: 1rem;\\n}\\n\\n.feels-like .temp {\\n    font-size: 3rem;\\n}\\n\\n.basic-info img {\\n    width: 1.5rem;\\n    height: 1.5rem;\\n}\\n\\n.sunrise-sunset {\\n    display: flex;\\n}\\n\\n.sunrise-sunset div {\\n    display: flex;\\n    align-items: center;\\n    margin-left: .5rem;\\n}\\n\\n.today .detailed-info {\\n    display: grid;\\n    padding: 1rem;\\n    gap: 0rem 1rem;\\n    grid-template-columns: 1fr 1fr;\\n}\\n\\n.today .detailed-info > * {\\n    display: flex;\\n    justify-content: space-between;\\n    border-top: 1px solid rgb(196, 196, 196);\\n    padding: .75rem 1rem;\\n    align-items: center;\\n    height: min-content;\\n}\\n\\n.today .detailed-info .info-stuff {\\n    display: flex;\\n    align-items: center;\\n}\\n\\n.info-stuff img {\\n    width: 1.5rem;\\n    height: 1.5rem;\\n    object-fit: contain;\\n    margin-right: .5rem;\\n}\\n\\n/* Hourly section basic styling */\\n\\n.hourly {\\n    display: flex;\\n    width: 100%;\\n    flex-direction: column;\\n    background-color: white;\\n    border-radius: 6px;\\n}\\n\\n.hourly-header {\\n    padding: 1rem 1rem 1rem 1rem;\\n    background-color: rgb(34, 34, 65);\\n    border-radius: 6px 6px 0px 0px;\\n}\\n\\n.hourly-header p {\\n    font-size: 1.2rem;\\n    color: white;\\n}\\n\\n.forecast-container-container {\\n    display: flex;\\n    padding: .5rem;\\n}\\n\\n.forecast-container {\\n    display: flex;\\n    width: 100%;\\n    overflow-x: scroll;\\n    overflow-y: hidden;\\n    height: min-content;\\n    gap: 1.5rem;\\n    padding: .5rem 1rem 1rem;\\n    background-color: white;\\n}\\n\\n.hour {\\n    text-wrap: nowrap;\\n    width: min-content;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n\\n.hour .icon {\\n    width: 2rem;\\n    height: 2rem;\\n}\\n\\n.rainfall {\\n    display: flex;\\n}\\n\\n.rainfall p {\\n    font-size: .8rem;\\n}\\n\\n.rainfall-img {\\n    height: .8rem;\\n    width: .8rem;\\n}\\n\\n/* Style the 10-day forecast section */\\n\\n.ten-day {\\n    display: flex;\\n    flex-direction: column;\\n    width: 50%;\\n    background-color: white;\\n    border-radius: 6px;\\n}\\n\\n.ten-day-header {\\n    background-color: rgb(34, 34, 65);\\n    color: white;\\n    padding: 1rem;\\n    border-radius: 6px 6px 0px 0px;\\n}\\n\\n.ten-day-header p {\\n    font-size: 1.2rem;\\n}\\n\\n.ten-day-forecast-container {\\n    padding: .5rem 1rem;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n}\\n\\n.day { \\n    display: flex;\\n    justify-content: space-between;\\n    width: 100%;\\n    align-items: center;\\n    padding: .5rem 1rem;\\n    border-bottom: 1px solid gray;\\n}\\n\\n.day[data-index=\\\"9\\\"] {\\n    border-bottom: none;\\n}\\n\\n.day .date {\\n    width: 7rem;\\n    font-size: 1rem;\\n}\\n\\n.day .info {\\n    display: flex;\\n    gap: 1rem;\\n    flex-wrap: wrap;\\n    align-items: center;\\n}\\n\\n.day .condition {\\n    height: 2rem;\\n    width: 2rem;\\n}\\n\\n.day .max-min {\\n    display: flex;\\n    flex-wrap: wrap;\\n    align-items: center;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n  if (!url) {\n    return url;\n  }\n  url = String(url.__esModule ? url.default : url);\n\n  // If url is already wrapped in quotes, remove them\n  if (/^['\"].*['\"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n  if (options.hash) {\n    url += options.hash;\n  }\n\n  // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n  if (/[\"'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return \"\\\"\".concat(url.replace(/\"/g, '\\\\\"').replace(/\\n/g, \"\\\\n\"), \"\\\"\");\n  }\n  return url;\n};","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","__webpack_require__.nc = undefined;","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./styles.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./styles.css\";\n       export default content && content.locals ? content.locals : undefined;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { getDefaultOptions } from 'date-fns';\n/**\n * Returns the formatted time zone name of the provided `timeZone` or the current\n * system time zone if omitted, accounting for DST according to the UTC value of\n * the date.\n */\nexport function tzIntlTimeZoneName(length, date, options) {\n    const defaultOptions = getDefaultOptions();\n    const dtf = getDTF(length, options.timeZone, options.locale ?? defaultOptions.locale);\n    return 'formatToParts' in dtf ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\n}\nfunction partsTimeZone(dtf, date) {\n    const formatted = dtf.formatToParts(date);\n    for (let i = formatted.length - 1; i >= 0; --i) {\n        if (formatted[i].type === 'timeZoneName') {\n            return formatted[i].value;\n        }\n    }\n    return undefined;\n}\nfunction hackyTimeZone(dtf, date) {\n    const formatted = dtf.format(date).replace(/\\u200E/g, '');\n    const tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\n    return tzNameMatch ? tzNameMatch[0].substr(1) : '';\n}\n// If a locale has been provided `en-US` is used as a fallback in case it is an\n// invalid locale, otherwise the locale is left undefined to use the system locale.\nfunction getDTF(length, timeZone, locale) {\n    return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\n        timeZone: timeZone,\n        timeZoneName: length,\n    });\n}\n","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport function tzTokenizeDate(date, timeZone) {\n    const dtf = getDateTimeFormat(timeZone);\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nconst typeToPos = {\n    year: 0,\n    month: 1,\n    day: 2,\n    hour: 3,\n    minute: 4,\n    second: 5,\n};\nfunction partsOffset(dtf, date) {\n    try {\n        const formatted = dtf.formatToParts(date);\n        const filled = [];\n        for (let i = 0; i < formatted.length; i++) {\n            const pos = typeToPos[formatted[i].type];\n            if (pos !== undefined) {\n                filled[pos] = parseInt(formatted[i].value, 10);\n            }\n        }\n        return filled;\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return [NaN];\n        }\n        throw error;\n    }\n}\nfunction hackyOffset(dtf, date) {\n    const formatted = dtf.format(date);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n    return [\n        parseInt(parsed[3], 10),\n        parseInt(parsed[1], 10),\n        parseInt(parsed[2], 10),\n        parseInt(parsed[4], 10),\n        parseInt(parsed[5], 10),\n        parseInt(parsed[6], 10),\n    ];\n}\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nconst dtfCache = {};\n// New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\nconst testDateFormatted = new Intl.DateTimeFormat('en-US', {\n    hourCycle: 'h23',\n    timeZone: 'America/New_York',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n}).format(new Date('2014-06-25T04:00:00.123Z'));\nconst hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\n    testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\nfunction getDateTimeFormat(timeZone) {\n    if (!dtfCache[timeZone]) {\n        dtfCache[timeZone] = hourCycleSupported\n            ? new Intl.DateTimeFormat('en-US', {\n                hourCycle: 'h23',\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            })\n            : new Intl.DateTimeFormat('en-US', {\n                hour12: false,\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n    }\n    return dtfCache[timeZone];\n}\n","/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n    const utcDate = new Date(0);\n    utcDate.setUTCFullYear(fullYear, month, day);\n    utcDate.setUTCHours(hour, minute, second, millisecond);\n    return utcDate;\n}\n","import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\nimport { newDateUTC } from '../newDateUTC/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst patterns = {\n    timezone: /([Z+-].*)$/,\n    timezoneZ: /^(Z)$/,\n    timezoneHH: /^([+-]\\d{2})$/,\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n// Parse constious time zone offset formats to an offset in milliseconds\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\n    // Empty string\n    if (!timezoneString) {\n        return 0;\n    }\n    // Z\n    let token = patterns.timezoneZ.exec(timezoneString);\n    if (token) {\n        return 0;\n    }\n    let hours;\n    let absoluteOffset;\n    // ±hh\n    token = patterns.timezoneHH.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        if (!validateTimezone(hours)) {\n            return NaN;\n        }\n        return -(hours * MILLISECONDS_IN_HOUR);\n    }\n    // ±hh:mm or ±hhmm\n    token = patterns.timezoneHHMM.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[2], 10);\n        const minutes = parseInt(token[3], 10);\n        if (!validateTimezone(hours, minutes)) {\n            return NaN;\n        }\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n    }\n    // IANA time zone\n    if (isValidTimezoneIANAString(timezoneString)) {\n        date = new Date(date || Date.now());\n        const utcDate = isUtcDate ? date : toUtcDate(date);\n        const offset = calcOffset(utcDate, timezoneString);\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n        return -fixedOffset;\n    }\n    return NaN;\n}\nfunction toUtcDate(date) {\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n    const tokens = tzTokenizeDate(date, timezoneString);\n    // ms dropped because it's not provided by tzTokenizeDate\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n    let asTS = date.getTime();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n    const localTS = date.getTime();\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n        return offset;\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n        return o2;\n    }\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n}\nconst validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n    if (validIANATimezoneCache[timeZoneString])\n        return true;\n    try {\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n        validIANATimezoneCache[timeZoneString] = true;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n","import { tzIntlTimeZoneName } from '../../_lib/tzIntlTimeZoneName/index.js';\nimport { tzParseTimezone } from '../../_lib/tzParseTimezone/index.js';\nconst MILLISECONDS_IN_MINUTE = 60 * 1000;\nexport const formatters = {\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        if (timezoneOffset === 0) {\n            return 'Z';\n        }\n        switch (token) {\n            // Hours and optional minutes\n            case 'X':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XX`\n            case 'XXXX':\n            case 'XX': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XXX`\n            case 'XXXXX':\n            case 'XXX': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Hours and optional minutes\n            case 'x':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xx`\n            case 'xxxx':\n            case 'xx': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xxx`\n            case 'xxxxx':\n            case 'xxx': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (GMT)\n    O: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Short\n            case 'O':\n            case 'OO':\n            case 'OOO':\n                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n            // Long\n            case 'OOOO':\n            default:\n                return 'GMT' + formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (specific non-location)\n    z: function (date, token, options) {\n        switch (token) {\n            // Short\n            case 'z':\n            case 'zz':\n            case 'zzz':\n                return tzIntlTimeZoneName('short', date, options);\n            // Long\n            case 'zzzz':\n            default:\n                return tzIntlTimeZoneName('long', date, options);\n        }\n    },\n};\nfunction getTimeZoneOffset(timeZone, originalDate) {\n    const timeZoneOffset = timeZone\n        ? tzParseTimezone(timeZone, originalDate, true) / MILLISECONDS_IN_MINUTE\n        : originalDate?.getTimezoneOffset() ?? 0;\n    if (Number.isNaN(timeZoneOffset)) {\n        throw new RangeError('Invalid time zone specified: ' + timeZone);\n    }\n    return timeZoneOffset;\n}\nfunction addLeadingZeros(number, targetLength) {\n    const sign = number < 0 ? '-' : '';\n    let output = Math.abs(number).toString();\n    while (output.length < targetLength) {\n        output = '0' + output;\n    }\n    return sign + output;\n}\nfunction formatTimezone(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n    const minutes = addLeadingZeros(Math.floor(absOffset % 60), 2);\n    return sign + hours + delimiter + minutes;\n}\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n    if (offset % 60 === 0) {\n        const sign = offset > 0 ? '-' : '+';\n        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n    }\n    return formatTimezone(offset, delimiter);\n}\nfunction formatTimezoneShort(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = Math.floor(absOffset / 60);\n    const minutes = absOffset % 60;\n    if (minutes === 0) {\n        return sign + String(hours);\n    }\n    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    utcDate.setUTCFullYear(date.getFullYear());\n    return +date - +utcDate;\n}\n","/** Regex to identify the presence of a time zone specifier in a date string */\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\n","import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\nconst patterns = {\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n    datePattern: /^([0-9W+-]+)(.*)/,\n    plainTime: /:/,\n    // year tokens\n    YY: /^(\\d{2})$/,\n    YYY: [\n        /^([+-]\\d{2})$/, // 0 additional digits\n        /^([+-]\\d{3})$/, // 1 additional digit\n        /^([+-]\\d{4})$/, // 2 additional digits\n    ],\n    YYYY: /^(\\d{4})/,\n    YYYYY: [\n        /^([+-]\\d{4})/, // 0 additional digits\n        /^([+-]\\d{5})/, // 1 additional digit\n        /^([+-]\\d{6})/, // 2 additional digits\n    ],\n    // date tokens\n    MM: /^-(\\d{2})$/,\n    DDD: /^-?(\\d{3})$/,\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n    Www: /^-?W(\\d{2})$/,\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    // time zone tokens (to identify the presence of a tz)\n    timeZone: tzPattern,\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param argument the value to convert\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n *\n * @returns the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function toDate(argument, options = {}) {\n    if (arguments.length < 1) {\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n    if (argument === null) {\n        return new Date(NaN);\n    }\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\n    }\n    // Clone the date\n    if (argument instanceof Date ||\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument.getTime());\n    }\n    else if (typeof argument === 'number' ||\n        Object.prototype.toString.call(argument) === '[object Number]') {\n        return new Date(argument);\n    }\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\n        return new Date(NaN);\n    }\n    const dateStrings = splitDateString(argument);\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\n    const date = parseDate(restDateString, year);\n    if (date === null || isNaN(date.getTime())) {\n        return new Date(NaN);\n    }\n    if (date) {\n        const timestamp = date.getTime();\n        let time = 0;\n        let offset;\n        if (dateStrings.time) {\n            time = parseTime(dateStrings.time);\n            if (time === null || isNaN(time)) {\n                return new Date(NaN);\n            }\n        }\n        if (dateStrings.timeZone || options.timeZone) {\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n            if (isNaN(offset)) {\n                return new Date(NaN);\n            }\n        }\n        else {\n            // get offset accurate to hour in time zones that change offset\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n        }\n        return new Date(timestamp + time + offset);\n    }\n    else {\n        return new Date(NaN);\n    }\n}\nfunction splitDateString(dateString) {\n    const dateStrings = {};\n    let parts = patterns.dateTimePattern.exec(dateString);\n    let timeString;\n    if (!parts) {\n        parts = patterns.datePattern.exec(dateString);\n        if (parts) {\n            dateStrings.date = parts[1];\n            timeString = parts[2];\n        }\n        else {\n            dateStrings.date = null;\n            timeString = dateString;\n        }\n    }\n    else {\n        dateStrings.date = parts[1];\n        timeString = parts[3];\n    }\n    if (timeString) {\n        const token = patterns.timeZone.exec(timeString);\n        if (token) {\n            dateStrings.time = timeString.replace(token[1], '');\n            dateStrings.timeZone = token[1].trim();\n        }\n        else {\n            dateStrings.time = timeString;\n        }\n    }\n    return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n    if (dateString) {\n        const patternYYY = patterns.YYY[additionalDigits];\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\n        // YYYY or ±YYYYY\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n        if (token) {\n            const yearString = token[1];\n            return {\n                year: parseInt(yearString, 10),\n                restDateString: dateString.slice(yearString.length),\n            };\n        }\n        // YY or ±YYY\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n        if (token) {\n            const centuryString = token[1];\n            return {\n                year: parseInt(centuryString, 10) * 100,\n                restDateString: dateString.slice(centuryString.length),\n            };\n        }\n    }\n    // Invalid ISO-formatted year\n    return {\n        year: null,\n    };\n}\nfunction parseDate(dateString, year) {\n    // Invalid ISO-formatted year\n    if (year === null) {\n        return null;\n    }\n    let date;\n    let month;\n    let week;\n    // YYYY\n    if (!dateString || !dateString.length) {\n        date = new Date(0);\n        date.setUTCFullYear(year);\n        return date;\n    }\n    // YYYY-MM\n    let token = patterns.MM.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        if (!validateDate(year, month)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month);\n        return date;\n    }\n    // YYYY-DDD or YYYYDDD\n    token = patterns.DDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        const dayOfYear = parseInt(token[1], 10);\n        if (!validateDayOfYearDate(year, dayOfYear)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, 0, dayOfYear);\n        return date;\n    }\n    // yyyy-MM-dd or YYYYMMDD\n    token = patterns.MMDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        const day = parseInt(token[2], 10);\n        if (!validateDate(year, month, day)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month, day);\n        return date;\n    }\n    // YYYY-Www or YYYYWww\n    token = patterns.Www.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        if (!validateWeekDate(week)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week);\n    }\n    // YYYY-Www-D or YYYYWwwD\n    token = patterns.WwwD.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        const dayOfWeek = parseInt(token[2], 10) - 1;\n        if (!validateWeekDate(week, dayOfWeek)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week, dayOfWeek);\n    }\n    // Invalid ISO-formatted date\n    return null;\n}\nfunction parseTime(timeString) {\n    let hours;\n    let minutes;\n    // hh\n    let token = patterns.HH.exec(timeString);\n    if (token) {\n        hours = parseFloat(token[1].replace(',', '.'));\n        if (!validateTime(hours)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\n    }\n    // hh:mm or hhmm\n    token = patterns.HHMM.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseFloat(token[2].replace(',', '.'));\n        if (!validateTime(hours, minutes)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    }\n    // hh:mm:ss or hhmmss\n    token = patterns.HHMMSS.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseInt(token[2], 10);\n        const seconds = parseFloat(token[3].replace(',', '.'));\n        if (!validateTime(hours, minutes, seconds)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n    }\n    // Invalid ISO-formatted time\n    return null;\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n    week = week || 0;\n    day = day || 0;\n    const date = new Date(0);\n    date.setUTCFullYear(isoWeekYear, 0, 4);\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n}\n// Validation functions\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nfunction validateDate(year, month, date) {\n    if (month < 0 || month > 11) {\n        return false;\n    }\n    if (date != null) {\n        if (date < 1) {\n            return false;\n        }\n        const isLeapYear = isLeapYearIndex(year);\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n            return false;\n        }\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n    if (dayOfYear < 1) {\n        return false;\n    }\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && dayOfYear > 366) {\n        return false;\n    }\n    if (!isLeapYear && dayOfYear > 365) {\n        return false;\n    }\n    return true;\n}\nfunction validateWeekDate(week, day) {\n    if (week < 0 || week > 52) {\n        return false;\n    }\n    if (day != null && (day < 0 || day > 6)) {\n        return false;\n    }\n    return true;\n}\nfunction validateTime(hours, minutes, seconds) {\n    if (hours < 0 || hours >= 25) {\n        return false;\n    }\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\n        return false;\n    }\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\n        return false;\n    }\n    return true;\n}\n","import { format as dateFnsFormat } from 'date-fns/format';\nimport { formatters } from './formatters/index.js';\nimport { toDate } from '../toDate/index.js';\nconst tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may consty by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |\n * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the\n *    preferred standard of the current locale (en-US by default) which may not always give the expected result.\n *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole\n *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard\n *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this\n *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param date the original date\n * @param formatStr the string of tokens\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @param {Date|Number} [options.originalDate] - can be used to pass the original unmodified date to `format` to\n *   improve correctness of the replaced timezone token close to the DST threshold.\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:\n *   https://git.io/fxCyr\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options = {}) {\n    formatStr = String(formatStr);\n    const matches = formatStr.match(tzFormattingTokensRegExp);\n    if (matches) {\n        const d = toDate(options.originalDate || date, options);\n        // Work through each match and replace the tz token in the format string with the quoted\n        // formatted time zone so the remaining tokens can be filled in by date-fns#format.\n        formatStr = matches.reduce(function (result, token) {\n            if (token[0] === \"'\") {\n                return result; // This is a quoted portion, matched only to ensure we don't match inside it\n            }\n            const pos = result.indexOf(token);\n            const precededByQuotedSection = result[pos - 1] === \"'\";\n            const replaced = result.replace(token, \"'\" + formatters[token[0]](d, token, options) + \"'\");\n            // If the replacement results in two adjoining quoted strings, the back to back quotes\n            // are removed, so it doesn't look like an escaped quote.\n            return precededByQuotedSection\n                ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1)\n                : replaced;\n        }, formatStr);\n    }\n    return dateFnsFormat(date, formatStr, options);\n}\n","import { parse, startOfHour } from 'date-fns';\nimport { format, toZonedTime } from 'date-fns-tz';\n\n// Import images\nimport thunderstorm from './images/icons/forecast-icons/thunderstorm.png';\nimport snow from './images/icons/forecast-icons/snow.png';\nimport rain from './images/icons/forecast-icons/rain.png';\nimport fog from './images/icons/forecast-icons/fog.png';\nimport cloudy from './images/icons/forecast-icons/cloudy.png';\nimport clear from './images/icons/forecast-icons/clear.png';\n\n// Bind mapped values to object\nconst iconMap = {\n    thunderstorm,\n    snow,\n    rain,\n    fog,\n    cloudy,\n    clear\n};\n\nconst renderData = function(data, system) {\n    // Use provided measurement system to store measurement units in obj units\n    let units = {};\n    if (system == 'us') {\n        {\n        units.degrees = `\\u00B0F`,\n        units.pressure = 'in',\n        units.length = 'mi',\n        units.speed = 'mph'\n        units.inHgConversionValue = 33.8639;\n        units.toFixed = 2\n        }\n    } else {\n        {\n            units.degrees = '\\u00B0C',\n            units.pressure = 'hPa',\n            units.length = 'km',\n            units.speed = 'kmph'\n            units.inHgConversionValue = 1;\n            units.toFixed = 0\n        }\n    }\n    toggleDegreesButton(units);\n    renderOverview(data, units);\n    renderTodayInfo(data, units);\n    renderForecastInfo(data);\n    renderTenDayInfo(data, units);\n}\n\n// Function to change display of degree measurement toggle button\nconst toggleDegreesButton = function(units) {\n    let degreesButton = document.querySelector('.degrees-button');\n    degreesButton.textContent = units.degrees;\n} ;\n\n// Function to render overview section\nconst renderOverview = function(data, units) {\n    // Declare query selectors\n    const overviewEle = document.querySelector('.overview');\n    const locationEle = document.querySelector('.overview .location');\n    const timeEle = document.querySelector('.overview .time');\n    const temperatureEle = document.querySelector('.overview .temperature');\n    const weatherEle = document.querySelector('.overview .weather');\n    const dayNightEle = document.querySelector('.overview .day-night');\n\n    // Get the current condition for use in later functions\n    const condition = data.currentConditions.conditions;\n\n    // Set background of overview using classes\n    const conditionClass = parseConditionClass(condition);\n    overviewEle.className = `overview ${conditionClass}`;\n\n    // Set location to resolved address\n    locationEle.textContent = `${data.resolvedAddress}`;\n\n    // Set current time to the UTC converted to the local time zone\n    let timeZone = data.timezone;\n    let currentTime = parse(data.currentConditions.datetime, 'HH:mm:ss', new Date());\n    let formattedTime = format(currentTime, 'h:mm aa zzz', { timeZone });\n    timeEle.textContent = `As of ${formattedTime}`;\n\n    // Current temperature rounded down\n    temperatureEle.textContent = `${Math.floor(data.currentConditions.temp)}${units.degrees}`;\n\n    // Summary of current conditions\n    weatherEle.textContent = `${condition}`;\n\n    // High and lows for the day, rounded\n    dayNightEle.textContent = `High ${Math.floor(data.days[0].tempmax)}${units.degrees} \\u2022 Low ${Math.floor(data.days[0].tempmin)}${units.degrees}`;\n}\n\n// Function to get the appropriate class to apply to the overview element for its background\n// Additionally, will apply an img src to hourly forecast info \nconst parseConditionClass = function (condition) {\n    // Account for case sensitivity\n    const cond = condition.toLowerCase();\n\n    // Return a class based on the conditions from API\n    if (cond.includes('t-storm') || cond.includes('thunder')) return 'thunderstorm';\n    if (cond.includes('snow') || cond.includes('flurries') || cond.includes('sleet') || cond.includes('ice')) return 'snow';\n    if (cond.includes('rain') || cond.includes('shower') || cond.includes('drizzle')) return 'rain';\n    if (cond.includes('fog') || cond.includes('haze') || cond.includes('mist') || cond.includes('smoke')) return 'fog';\n    if (cond.includes('cloud') || cond.includes('overcast')) return 'cloudy';\n    if (cond.includes('sun') || cond.includes('clear')) return 'clear';\n\n    // Return default in case there is an issue parsing for a condition class\n    return 'default';\n}\n\n// Function to render todays info\nconst renderTodayInfo = function(data, units) {\n    // Declare query selectors\n    const todayHeaderEle = document.querySelector('.today-header p');\n    const feelsLikeEle = document.querySelector('.basic-info .feels-like .temp');\n    const sunriseEle = document.querySelector('.basic-info .sunrise p');\n    const sunsetEle = document.querySelector('.basic-info .sunset p');\n    const highLowEle = document.querySelector('.high-low .stats');\n    const windEle = document.querySelector('.wind .stats');\n    const humidityEle = document.querySelector('.humidity .stats');\n    const dewPointele = document.querySelector('.dew-point .stats');\n    const pressureEle = document.querySelector('.pressure .stats');\n    const uvIndexEle = document.querySelector('.uv-index .stats');\n    const visibility = document.querySelector('.visibility .stats');\n    const moonPhaseEle = document.querySelector('.moon-phase .stats');\n\n    // Populate header with current info\n    todayHeaderEle.textContent = `Weather Today in ${data.resolvedAddress}`;\n    feelsLikeEle.textContent = `${Math.floor(data.currentConditions.temp)}${units.degrees}`;\n\n    // Format and populate sunrise and sunset times\n    let sunriseTime = parse(data.currentConditions.sunrise, 'HH:mm:ss', new Date());\n    let sunsetTime = parse(data.currentConditions.sunset, 'HH:mm:ss', new Date());\n    let formattedSunriseTime = format(sunriseTime, 'h:mm aa');\n    let formattedSunsetTime = format(sunsetTime, 'h:mm aa');\n    sunriseEle.textContent = `${formattedSunriseTime}`;\n    sunsetEle.textContent = `${formattedSunsetTime}`;\n\n    // Add stats info text to each elemenet\n    highLowEle.textContent = `${Math.floor(data.days[0].tempmax)}\\u00B0/${Math.floor(data.days[0].tempmin)}\\u00B0`;\n    windEle.textContent = `${data.currentConditions.windspeed}${units.speed}`;\n    humidityEle.textContent = `${Math.floor(data.currentConditions.humidity)}%`;\n    dewPointele.textContent = `${Math.floor(data.currentConditions.dew)}%`;\n    pressureEle.textContent = `${Number((Number(data.currentConditions.pressure) / units.inHgConversionValue)).toFixed(units.toFixed)} ${units.pressure}`;\n    uvIndexEle.textContent = `${data.currentConditions.uvindex} of 11`;\n    visibility.textContent = `${data.currentConditions.visibility} ${units.length}`;\n    moonPhaseEle.textContent = parseMoonPhaseName(data.currentConditions.moonphase);\n}\n\n// Helper function to parse the literal moon phase name from the API data\nfunction parseMoonPhaseName(phase) {\n  if (phase < 0.03 || phase >= 0.97) return 'New Moon';\n  if (phase < 0.22) return 'Waxing Crescent';\n  if (phase < 0.28) return 'First Quarter';\n  if (phase < 0.47) return 'Waxing Gibbous';\n  if (phase < 0.53) return 'Full Moon';\n  if (phase < 0.72) return 'Waning Gibbous';\n  if (phase < 0.78) return 'Last Quarter';\n  return 'Waning Crescent';\n}\n\n// Function to render the 24-hour hourly forecast\nconst renderForecastInfo = function(data) {\n    let forecastHours = document.querySelectorAll('.forecast-container .hour');\n    const hourlyForecastData = parse24HourData(data.days, data.timezone);\n    forecastHours.forEach((hour) => {\n        // Declare query selectors under each forecast hour\n        const timeEle = hour.querySelector('.time');\n        const forecastImg = hour.querySelector('.icon');\n        const tempEle = hour.querySelector('.temp');\n        const rainfallImgEle = hour.querySelector('.rainfall-image');\n        const rainfallEle = hour.querySelector('.rainfall-text');\n\n        // Get index of element\n        const eleIndex = parseInt(hour.dataset.index, 10);\n\n        // Get current hour's forecast data\n        const currentData = hourlyForecastData[eleIndex];\n\n        // Render data to elements\n        let parsedTime = parse(currentData.time, 'HH:mm:ss', new Date());\n        timeEle.textContent = format(parsedTime, 'h aa');\n\n        let conditions = currentData.conditions;\n        let forecastImgSrc = parseConditionClass(conditions);\n        forecastImg.src = iconMap[forecastImgSrc];\n\n        tempEle.textContent = `${Math.floor(currentData.temp)}\\u00B0`;\n        rainfallEle.textContent = `${currentData.precipProb}%`;\n    })\n}\n\n// Function to select the upcoming 24 hours weather conditions from API data\nconst parse24HourData = function(days, timezone) {\n    // Declare arrays of data pulled from API \n    const todayData = days[0];\n    const tomorrowData = days[1];\n    const HOURS_IN_DAY = 24;\n\n    // Declare array of parsed data to return\n    let hourlyData = [];\n    \n    // Get current time, rounded to nearest hour and formatted as in API\n    const now = new Date();\n    const zonedDate = toZonedTime(now, timezone);\n    const currentHour = startOfHour(zonedDate);\n    const formattedCurrentHour = format(currentHour, 'HH:mm:ss', {timezone});\n\n    // Loop through and find today hour data that matches current hour\n    // Offset start of 24-hour forecast based on current hour of day\n    let currentHourOffset;\n    for(let i = 0; i < HOURS_IN_DAY; i++) {\n        if(todayData.hours[i].datetime == formattedCurrentHour)\n        {\n            currentHourOffset = i;\n        }\n    }\n\n    // Create data objects representing the next 24 hours\n    for (let i = 0; i < HOURS_IN_DAY; i++) {\n        let currentDayData;\n        // Start at the current hour using offset\n        let forecastHour = i + currentHourOffset;\n        // If the hour is past 23:59, loop into the next day and correct the forecast hour \n        // by 'resetting' to 0 with a -24 decrement and setting the day data to tomorrow\n        if (forecastHour < HOURS_IN_DAY) {\n            currentDayData = todayData;\n        } else {\n            currentDayData = tomorrowData;\n            forecastHour -= 24;\n        }\n        // Create object with parsed data from API\n        let currentHourData = currentDayData.hours[forecastHour]; \n        let currentHourDataParsed = {\n            time: currentHourData.datetime,\n            conditions: currentHourData.conditions,\n            temp: currentHourData.temp,\n            precipProb: currentHourData.precipprob\n        }\n        hourlyData.push(currentHourDataParsed);\n    }\n    return hourlyData;\n}\n\nconst renderTenDayInfo = function(data, units) {\n    let forecastDayEles = document.querySelectorAll('.day');\n    forecastDayEles.forEach((day) => {\n        // Select elements under each day\n        let dateEle = day.querySelector('.date');\n        let rainfallEle = day.querySelector('.rainfall-text');\n        let conditionEle = day.querySelector('.info .condition');\n        let maxMinEle = day.querySelector('.max-min');\n        let index = day.dataset.index;\n\n        // Set date to today or otherwise, day of week\n        if (index == 0) {\n            dateEle.textContent = 'Today';\n        } else {\n            let currentDay = parse(data.days[index].datetime, \"yyyy-MM-dd\", new Date());\n            let dayOfWeek = format(currentDay, 'EEEE');\n            if (index > 6) {\n                dateEle.textContent = `Next ${dayOfWeek}`;\n            } else {\n                dateEle.textContent = dayOfWeek;\n            }\n        }\n\n        rainfallEle.textContent = `${Math.floor(data.days[index].precipprob)}%`\n\n        let conditionEleSrc = parseConditionClass(data.days[index].conditions);\n        console.log(conditionEleSrc);\n        conditionEle.src = iconMap[conditionEleSrc];\n\n        maxMinEle.textContent = `${Math.floor(data.days[index].tempmax)}\\u00B0 / ${Math.floor(data.days[index].tempmin)}\\u00B0`;\n    })\n}\n\nexport { renderData }","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfHour} function options.\n */\n\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an hour\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\nexport function startOfHour(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setMinutes(0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfHour;\n","import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { toDate } from '../toDate/index.js';\n/**\n * @name toZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport function toZonedTime(date, timeZone, options) {\n    date = toDate(date, options);\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n    const d = new Date(date.getTime() - offsetMilliseconds);\n    const resultDate = new Date(0);\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n    return resultDate;\n}\n","import './styles.css';\nimport * as ui from './ui.js';\nimport * as api from './api.js';\n\n// Define primary function for site\nconst loadWeather = async function(location, system) {\n    try {\n        const weatherData = await api.getWeatherData(location, system);\n        currentLocation = weatherData.resolvedAddress;\n        ui.renderData(weatherData, system);\n        return true;\n    } catch (err) {\n        console.error('Weather loading failed:', err);\n        throw err;\n    }\n}\n\n\n// Define variable to store location returned from API to site\nlet currentLocation;\n// Define user-selected variable for degree measurement system\nlet degreeSystem = 'us';\n\n// Select degrees switch button and add switch to edit degree system variable\nlet degreesButton = document.querySelector('.degrees-button');\ndegreesButton.addEventListener('click', () => {\n    // Get text content from site\n    if (degreeSystem == 'us') {\n        degreeSystem = 'metric';\n        loadWeather(currentLocation, degreeSystem);\n        searchInput.value = '';\n    } else {\n        degreeSystem = 'us';\n        loadWeather(currentLocation, degreeSystem);\n        searchInput.value = '';\n    }\n})\n\n// Execute primary function upon Dom loaded\ndocument.addEventListener('DOMContentLoaded', async () => {\n    try {\n        let ipData = await api.getIPData();\n        currentLocation = `${ipData.city} ${ipData.subdivision} ${ipData.country}`;   \n        loadWeather(currentLocation, degreeSystem);\n    } catch {\n        currentLocation = `New York City, NY`;\n        loadWeather(currentLocation, degreeSystem);\n    }\n});\n\n// Declare interactable query selectors\nlet searchInput = document.querySelector('#search');\nlet searchButton = document.querySelector('.search-button');\n\ndocument.addEventListener('keydown', (e) => {\n    if(e.key == 'Enter' && searchInput.value.trim(' ') !== ''){\n        loadWeather(searchInput.value, degreeSystem)\n            .then(() => {\n                searchInput.value = '';\n            })\n            .catch(console.log);\n    }\n});\n\nsearchButton.addEventListener('click', () => {\n    if(searchInput.value.trim(' ') !== '') {\n        loadWeather(searchInput.value, degreeSystem)\n            .then(() => {\n                searchInput.value = '';\n            })\n            .catch(console.log);\n    }\n});\n","// Function to fetch and return weather data from API\nconst getWeatherData = async function(city, system){\n    const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${city}?unitGroup=${system}&key=MNWL7XRQCYZZDAFFFELDZBUEK`);\n    if (!response.ok) throw new Error('Failed to fetch');\n    let data = await response.json();\n    console.log(data);\n    return data;\n}\n\nconst getIPData = async function() {\n    const response = await fetch('https://iplocate.io/api/lookup/?apikey=6f10dfa2e3fe653c9be9c11f29d2e6e0');\n    if (!response.ok) throw new Error('Failed to fetch');\n    let data = await(response.json());\n    return data;\n}\n\nexport { getWeatherData, getIPData }"],"names":["module","exports","styleElement","nonce","setAttribute","stylesInDOM","getIndexByIdentifier","identifier","result","i","length","modulesToDom","list","options","idCountMap","identifiers","item","id","base","count","concat","indexByIdentifier","obj","css","media","sourceMap","supports","layer","references","updater","addElementStyle","byIndex","splice","push","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","styleSheet","cssText","firstChild","removeChild","appendChild","document","createTextNode","cssWithMappingToString","toString","this","map","content","needLayer","join","modules","dedupe","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","___CSS_LOADER_URL_IMPORT_0___","URL","___CSS_LOADER_URL_IMPORT_1___","___CSS_LOADER_URL_IMPORT_2___","___CSS_LOADER_URL_IMPORT_3___","___CSS_LOADER_URL_IMPORT_4___","___CSS_LOADER_URL_IMPORT_5___","___CSS_LOADER_EXPORT___","___CSS_LOADER_URL_REPLACEMENT_0___","___CSS_LOADER_URL_REPLACEMENT_1___","___CSS_LOADER_URL_REPLACEMENT_2___","___CSS_LOADER_URL_REPLACEMENT_3___","___CSS_LOADER_URL_REPLACEMENT_4___","___CSS_LOADER_URL_REPLACEMENT_5___","url","String","__esModule","default","test","slice","hash","needQuotes","replace","element","createElement","setAttributes","attributes","insert","memo","style","target","styleTarget","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","insertStyleElement","styleTagTransform","apply","parentNode","removeStyleElement","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","p","b","baseURI","self","href","nc","locals","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","width","defaultWidth","formats","formatLong","date","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","localize","ordinalNumber","dirtyNumber","_options","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","Array","isArray","array","findIndex","object","findKey","valueCallback","rest","parsePattern","parseInt","parseResult","any","enUS","code","formatDistance","token","tokenValue","addSuffix","comparison","formatRelative","_date","_baseDate","weekStartsOn","firstWeekContainsDate","dateLongFormatter","pattern","timeLongFormatter","longFormatters","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","subject","toLowerCase","message","console","warn","includes","RangeError","Math","pow","millisecondsInWeek","constructFromSymbol","Symbol","for","constructFrom","Date","constructor","defaultOptions","getDefaultOptions","assign","argument","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","priority","super","set","flags","DateTimezoneSetter","reference","timestampIsSet","date_","isConstructor","setFullYear","getFullYear","getMonth","getDate","setHours","getHours","getMinutes","getSeconds","getMilliseconds","transpose","Parser","run","dateString","parse","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","trunc","isLeapYearIndex","year","startOfWeek","locale","in","getDay","diff","setDate","getWeekYear","firstWeekOfNextYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","startOfISOWeek","getWeek","firstWeek","startOfWeekYear","round","getISOWeekYear","fourthOfJanuaryOfNextYear","fourthOfJanuaryOfThisYear","getTime","getISOWeek","fourthOfJanuary","startOfISOWeekYear","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","isNaN","NaN","setDay","currentDay","delta","setISODay","getISODay","getTimezoneOffsetInMilliseconds","utcDate","UTC","setUTCFullYear","parsers","G","incompatibleTokens","y","isTwoDigitYear","unit","normalizedTwoDigitYear","Y","R","_flags","firstWeekOfYear","u","Q","setMonth","q","M","L","w","week","setWeek","I","setISOWeek","isLeapYear","D","subpriority","E","wholeWeekDays","floor","c","B","h","isPM","H","K","hours","setMinutes","s","setSeconds","S","setMilliseconds","X","x","t","T","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","unescapedLatinCharacterRegExp","dateStr","formatStr","referenceDate","invalidDate","subFnOptions","setters","tokens","substring","firstCharacter","longFormatter","usedTokens","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","parser","incompatibleToken","find","usedToken","fullToken","indexOf","uniquePrioritySetters","sort","filter","setterArray","startOfDay","getDayOfYear","laterDate","earlierDate","laterDate_","earlierDate_","dates","normalize","bind","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","differenceInCalendarDays","startOfYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","signedYear","dayPeriodEnumValue","numberOfDigits","milliseconds","formatters","signedWeekYear","weekYear","ceil","isoWeek","dayOfYear","dayOfWeek","localDayOfWeek","isoDayOfWeek","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","O","formatTimezoneShort","z","offset","delimiter","sign","absOffset","minutes","isValid","matched","tzIntlTimeZoneName","dtf","timeZone","Intl","DateTimeFormat","timeZoneName","getDTF","formatted","formatToParts","type","partsTimeZone","tzNameMatch","exec","substr","hackyTimeZone","typeToPos","hour","minute","second","dtfCache","testDateFormatted","hourCycle","hourCycleSupported","fullYear","millisecond","setUTCHours","MILLISECONDS_IN_HOUR","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneString","isUtcDate","absoluteOffset","validateTimezone","timeZoneString","validIANATimezoneCache","error","isValidTimezoneIANAString","now","toUtcDate","calcOffset","fixedOffset","utcGuess","o2","o3","max","fixOffset","hour12","getDateTimeFormat","filled","pos","partsOffset","parsed","hackyOffset","tzTokenizeDate","asUTC","asTS","over","getTimeZoneOffset","originalDate","timeZoneOffset","output","dateTimePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","arguments","TypeError","additionalDigits","dateStrings","timeString","parts","trim","splitDateString","restDateString","patternYYY","patternYYYYY","yearString","centuryString","parseYear","validateDate","validateDayOfYearDate","validateWeekDate","dayOfISOWeekYear","parseDate","timestamp","parseFloat","validateTime","seconds","parseTime","isoWeekYear","getUTCDay","setUTCDate","getUTCDate","tzFormattingTokensRegExp","matches","reduce","precededByQuotedSection","replaced","isToken","preprocessor","formatterOptions","part","formatter","iconMap","thunderstorm","snow","rain","fog","cloudy","clear","parseConditionClass","condition","cond","parse24HourData","days","todayData","tomorrowData","hourlyData","formattedCurrentHour","startOfHour","offsetMilliseconds","resultDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","currentHourOffset","datetime","currentDayData","forecastHour","currentHourData","currentHourDataParsed","conditions","temp","precipProb","precipprob","loadWeather","async","system","weatherData","city","response","fetch","ok","json","log","currentLocation","resolvedAddress","units","degrees","pressure","speed","inHgConversionValue","toFixed","textContent","toggleDegreesButton","overviewEle","locationEle","timeEle","temperatureEle","weatherEle","dayNightEle","currentConditions","conditionClass","className","formattedTime","tempmax","tempmin","renderOverview","todayHeaderEle","feelsLikeEle","sunriseEle","sunsetEle","highLowEle","windEle","humidityEle","dewPointele","pressureEle","uvIndexEle","visibility","moonPhaseEle","sunriseTime","sunrise","sunsetTime","sunset","formattedSunriseTime","formattedSunsetTime","phase","windspeed","humidity","dew","uvindex","moonphase","renderTodayInfo","forecastHours","querySelectorAll","hourlyForecastData","forEach","forecastImg","tempEle","rainfallEle","eleIndex","dataset","currentData","parsedTime","forecastImgSrc","renderForecastInfo","dateEle","conditionEle","maxMinEle","conditionEleSrc","renderTenDayInfo","err","degreeSystem","addEventListener","searchInput","ipData","subdivision","country","searchButton","then","catch"],"sourceRoot":""}